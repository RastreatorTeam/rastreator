author: rastreator
name: users_same_timestamp_password
state: enabled
tactic: credential access
tag: attack
description: Get users with password set at the same time
statement:
  main: >-
    match (u1:User{enabled:true, domain:'RAS-DOMAIN'}), (u2:User{enabled:true, domain:'RAS-DOMAIN'})
    where not u1.pwdlastset = -1 and not u1.name = u2.name and u1.pwdlastset = u2.pwdlastset
    return distinct u1.name as Name, split(toString(datetime({epochSeconds:toInteger(u1.pwdlastset)})), '.')[0] as Datetime, u1.pwdlastset as Timestamp
    order by Timestamp desc, Name asc
  count:
    - return .* order/return split(toString(datetime({epochSeconds:toInteger(u1.pwdlastset)})), '.')[0] as Datetime, count(distinct u1.name) as Count order
    - order .*/order by Count desc, Datetime asc
reference:
  - https://posts.specterops.io/case-study-password-analysis-with-bloodhound-a3d264736c7
  - https://porterhau5.com/blog/representing-password-reuse-in-bloodhound/
nextsteps:
  rt:
    - Compromise them.
    - Check if those users share the same password or hash.
  bt:
    - Discover why passwords are set at the same time.
    - Check if passwords have the same hash.
